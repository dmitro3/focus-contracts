/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FocusMarketplaceInterface extends utils.Interface {
  functions: {
    "buyItem(address,uint256,address)": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "feeReceipient()": FunctionFragment;
    "focus721()": FunctionFragment;
    "listItem(address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "listings(address,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "platformFee()": FunctionFragment;
    "registerRoyalty(address,uint256,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royalties(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateListing(address,uint256,uint256)": FunctionFragment;
    "updatePlatformFee(uint256)": FunctionFragment;
    "updatePlatformFeeRecipient(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "focus721", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerRoyalty",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFeeRecipient",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "focus721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFeeRecipient",
    data: BytesLike
  ): Result;

  events: {
    "ItemCanceled(address,address,uint256)": EventFragment;
    "ItemListed(address,address,uint256,uint256,uint256,uint256,bool,address)": EventFragment;
    "ItemSold(address,address,address,uint256,uint256,uint256)": EventFragment;
    "ItemUpdated(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatePlatformFee(uint256)": EventFragment;
    "UpdatePlatformFeeRecipient(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePlatformFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePlatformFeeRecipient"): EventFragment;
}

export type ItemCanceledEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; nft: string; tokenId: BigNumber }
>;

export type ItemCanceledEventFilter = TypedEventFilter<ItemCanceledEvent>;

export type ItemListedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, string],
  {
    owner: string;
    nft: string;
    tokenId: BigNumber;
    quantity: BigNumber;
    pricePerItem: BigNumber;
    startingTime: BigNumber;
    isPrivate: boolean;
    allowedAddress: string;
  }
>;

export type ItemListedEventFilter = TypedEventFilter<ItemListedEvent>;

export type ItemSoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    seller: string;
    buyer: string;
    nft: string;
    tokenId: BigNumber;
    quantity: BigNumber;
    price: BigNumber;
  }
>;

export type ItemSoldEventFilter = TypedEventFilter<ItemSoldEvent>;

export type ItemUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { owner: string; nft: string; tokenId: BigNumber; newPrice: BigNumber }
>;

export type ItemUpdatedEventFilter = TypedEventFilter<ItemUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpdatePlatformFeeEvent = TypedEvent<
  [BigNumber],
  { platformFee: BigNumber }
>;

export type UpdatePlatformFeeEventFilter =
  TypedEventFilter<UpdatePlatformFeeEvent>;

export type UpdatePlatformFeeRecipientEvent = TypedEvent<
  [string],
  { platformFeeRecipient: string }
>;

export type UpdatePlatformFeeRecipientEventFilter =
  TypedEventFilter<UpdatePlatformFeeRecipientEvent>;

export interface FocusMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FocusMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeReceipient(overrides?: CallOverrides): Promise<[string]>;

    focus721(overrides?: CallOverrides): Promise<[string]>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _pricePerItem: BigNumberish,
      _startingTime: BigNumberish,
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        quantity: BigNumber;
        pricePerItem: BigNumber;
        startingTime: BigNumber;
        allowedAddress: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerRoyalty(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _royalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royalties(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePlatformFee(
      _platformFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePlatformFeeRecipient(
      _platformFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _owner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    _nftAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeReceipient(overrides?: CallOverrides): Promise<string>;

  focus721(overrides?: CallOverrides): Promise<string>;

  listItem(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _quantity: BigNumberish,
    _pricePerItem: BigNumberish,
    _startingTime: BigNumberish,
    _allowedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listings(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      quantity: BigNumber;
      pricePerItem: BigNumber;
      startingTime: BigNumber;
      allowedAddress: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  platformFee(overrides?: CallOverrides): Promise<BigNumber>;

  registerRoyalty(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _royalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royalties(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateListing(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePlatformFee(
    _platformFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePlatformFeeRecipient(
    _platformFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReceipient(overrides?: CallOverrides): Promise<string>;

    focus721(overrides?: CallOverrides): Promise<string>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _pricePerItem: BigNumberish,
      _startingTime: BigNumberish,
      _allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        quantity: BigNumber;
        pricePerItem: BigNumber;
        startingTime: BigNumber;
        allowedAddress: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerRoyalty(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _royalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royalties(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformFee(
      _platformFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformFeeRecipient(
      _platformFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemCanceled(address,address,uint256)"(
      owner?: string | null,
      nft?: string | null,
      tokenId?: null
    ): ItemCanceledEventFilter;
    ItemCanceled(
      owner?: string | null,
      nft?: string | null,
      tokenId?: null
    ): ItemCanceledEventFilter;

    "ItemListed(address,address,uint256,uint256,uint256,uint256,bool,address)"(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      quantity?: null,
      pricePerItem?: null,
      startingTime?: null,
      isPrivate?: null,
      allowedAddress?: null
    ): ItemListedEventFilter;
    ItemListed(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      quantity?: null,
      pricePerItem?: null,
      startingTime?: null,
      isPrivate?: null,
      allowedAddress?: null
    ): ItemListedEventFilter;

    "ItemSold(address,address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      buyer?: string | null,
      nft?: null,
      tokenId?: BigNumberish | null,
      quantity?: null,
      price?: null
    ): ItemSoldEventFilter;
    ItemSold(
      seller?: string | null,
      buyer?: string | null,
      nft?: null,
      tokenId?: BigNumberish | null,
      quantity?: null,
      price?: null
    ): ItemSoldEventFilter;

    "ItemUpdated(address,address,uint256,uint256)"(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      newPrice?: null
    ): ItemUpdatedEventFilter;
    ItemUpdated(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      newPrice?: null
    ): ItemUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdatePlatformFee(uint256)"(
      platformFee?: null
    ): UpdatePlatformFeeEventFilter;
    UpdatePlatformFee(platformFee?: null): UpdatePlatformFeeEventFilter;

    "UpdatePlatformFeeRecipient(address)"(
      platformFeeRecipient?: null
    ): UpdatePlatformFeeRecipientEventFilter;
    UpdatePlatformFeeRecipient(
      platformFeeRecipient?: null
    ): UpdatePlatformFeeRecipientEventFilter;
  };

  estimateGas: {
    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeReceipient(overrides?: CallOverrides): Promise<BigNumber>;

    focus721(overrides?: CallOverrides): Promise<BigNumber>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _pricePerItem: BigNumberish,
      _startingTime: BigNumberish,
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerRoyalty(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _royalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royalties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePlatformFee(
      _platformFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePlatformFeeRecipient(
      _platformFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeReceipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    focus721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listItem(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _pricePerItem: BigNumberish,
      _startingTime: BigNumberish,
      _allowedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerRoyalty(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _royalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royalties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateListing(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePlatformFee(
      _platformFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePlatformFeeRecipient(
      _platformFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
